// SPDX-License-Identifier: Apache-2.0

use std::sync::Mutex;

use ink_metadata::InkProject;
use once_cell::sync::Lazy;

use crate::build_solidity;

/// The `mother` contract from the `ink!` examples, represented in solidity.
static MOTHER: Lazy<Mutex<InkProject>> = Lazy::new(|| {
    let contract = build_solidity(
        r##"
        struct Bids {
            address addr;
            uint128 size;
        }

        struct Status {
            uint32 blocknumber;
            AuctionStatus status;
            Outline outline;
        }

        enum Outline {
            NoWinner, WinnerDetected, PayoutCompleted
        }

        enum AuctionStatus {
            NotStarted, OpeningPeried, EndingPeriod, Ended, RfDelay
        }

        struct Auction {
            string name;
            uint8[32] subject;
            Bids[][] bids;
            uint32[3] terms;
            Status status;
            bool finalized;
            uint8[] vector;
        }

        contract Mother {
            Auction auction;
            mapping(address => uint128) balances;
        
            constructor(Auction a) {
                auction = a;
            }
        
            // constructor default() {} 
        
            function echo_auction(Auction a) public pure returns (Auction) {
                return a;
            }
        
            function revert_or_trap(bool revert, bool trap) public pure {
                if (revert) {
                
                }
                assert(!trap);
            }
        
            function debug_log(string message) public pure {
                print(message);
            }
        }"##,
    )
    .programs
    .pop()
    .unwrap()
    .abi;
    Mutex::new(contract)
});

/// ABI generated by `cargo-contract` from the actual `ink!` mother example contract.
static EXPECTED: Lazy<Mutex<InkProject>> = Lazy::new(|| {
    let contract = crate::abi::substrate::load(
        r##"{
        "source": {
          "hash": "0x072f74b700b60f4e53fbb611fd61d635841f28de0ccc408241d4efbfedc360cf",
          "language": "ink! 4.0.0-alpha.3",
          "compiler": "rustc 1.64.0",
          "wasm": "0x0"
        },
        "contract": {
          "name": "mother",
          "version": "4.0.0-alpha.3",
          "authors": [
            "Parity Technologies <admin@parity.io>"
          ],
          "description": "Mother of all contracts"
        },
        "spec": {
          "constructors": [
            {
              "args": [
                {
                  "label": "auction",
                  "type": {
                    "displayName": [
                      "Auction"
                    ],
                    "type": 13
                  }
                }
              ],
              "docs": [],
              "label": "new",
              "payable": false,
              "selector": "0x9bae9d5e"
            },
            {
              "args": [],
              "docs": [],
              "label": "default",
              "payable": false,
              "selector": "0xed4b9d1b"
            }
          ],
          "docs": [],
          "events": [
            {
              "args": [
                {
                  "docs": [],
                  "indexed": false,
                  "label": "auction",
                  "type": {
                    "displayName": [
                      "Auction"
                    ],
                    "type": 13
                  }
                }
              ],
              "docs": [
                " Event emitted when an auction being echoed."
              ],
              "label": "AuctionEchoed"
            }
          ],
          "messages": [
            {
              "args": [
                {
                  "label": "auction",
                  "type": {
                    "displayName": [
                      "Auction"
                    ],
                    "type": 13
                  }
                }
              ],
              "docs": [
                " Takes an auction data struct as input and returns it back."
              ],
              "label": "echo_auction",
              "mutates": true,
              "payable": false,
              "returnType": {
                "displayName": [
                  "Auction"
                ],
                "type": 13
              },
              "selector": "0xbc7ac4cf"
            },
            {
              "args": [
                {
                  "label": "fail",
                  "type": {
                    "displayName": [
                      "Option"
                    ],
                    "type": 18
                  }
                }
              ],
              "docs": [
                " Fails contract execution in the required way."
              ],
              "label": "revert_or_trap",
              "mutates": true,
              "payable": false,
              "returnType": {
                "displayName": [
                  "Result"
                ],
                "type": 20
              },
              "selector": "0xe62a1df5"
            },
            {
              "args": [
                {
                  "label": "_message",
                  "type": {
                    "displayName": [
                      "String"
                    ],
                    "type": 0
                  }
                }
              ],
              "docs": [
                " Prints the specified string into node's debug log."
              ],
              "label": "debug_log",
              "mutates": true,
              "payable": false,
              "returnType": null,
              "selector": "0x238582df"
            }
          ]
        },
        "storage": {
          "root": {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "struct": {
                        "fields": [
                          {
                            "layout": {
                              "leaf": {
                                "key": "0x00000000",
                                "ty": 0
                              }
                            },
                            "name": "name"
                          },
                          {
                            "layout": {
                              "leaf": {
                                "key": "0x00000000",
                                "ty": 1
                              }
                            },
                            "name": "subject"
                          },
                          {
                            "layout": {
                              "struct": {
                                "fields": [
                                  {
                                    "layout": {
                                      "leaf": {
                                        "key": "0x00000000",
                                        "ty": 4
                                      }
                                    },
                                    "name": "0"
                                  }
                                ],
                                "name": "Bids"
                              }
                            },
                            "name": "bids"
                          },
                          {
                            "layout": {
                              "array": {
                                "layout": {
                                  "leaf": {
                                    "key": "0x00000000",
                                    "ty": 10
                                  }
                                },
                                "len": 3,
                                "offset": "0x00000000"
                              }
                            },
                            "name": "terms"
                          },
                          {
                            "layout": {
                              "enum": {
                                "dispatchKey": "0x00000000",
                                "name": "Status",
                                "variants": {
                                  "0": {
                                    "fields": [],
                                    "name": "NotStarted"
                                  },
                                  "1": {
                                    "fields": [],
                                    "name": "OpeningPeriod"
                                  },
                                  "2": {
                                    "fields": [
                                      {
                                        "layout": {
                                          "leaf": {
                                            "key": "0x00000000",
                                            "ty": 10
                                          }
                                        },
                                        "name": "0"
                                      }
                                    ],
                                    "name": "EndingPeriod"
                                  },
                                  "3": {
                                    "fields": [
                                      {
                                        "layout": {
                                          "enum": {
                                            "dispatchKey": "0x00000000",
                                            "name": "Outline",
                                            "variants": {
                                              "0": {
                                                "fields": [],
                                                "name": "NoWinner"
                                              },
                                              "1": {
                                                "fields": [],
                                                "name": "WinnerDetected"
                                              },
                                              "2": {
                                                "fields": [],
                                                "name": "PayoutCompleted"
                                              }
                                            }
                                          }
                                        },
                                        "name": "0"
                                      }
                                    ],
                                    "name": "Ended"
                                  },
                                  "4": {
                                    "fields": [
                                      {
                                        "layout": {
                                          "leaf": {
                                            "key": "0x00000000",
                                            "ty": 10
                                          }
                                        },
                                        "name": "0"
                                      }
                                    ],
                                    "name": "RfDelay"
                                  }
                                }
                              }
                            },
                            "name": "status"
                          },
                          {
                            "layout": {
                              "leaf": {
                                "key": "0x00000000",
                                "ty": 11
                              }
                            },
                            "name": "finalized"
                          },
                          {
                            "layout": {
                              "leaf": {
                                "key": "0x00000000",
                                "ty": 12
                              }
                            },
                            "name": "vector"
                          }
                        ],
                        "name": "Auction"
                      }
                    },
                    "name": "auction"
                  },
                  {
                    "layout": {
                      "root": {
                        "layout": {
                          "leaf": {
                            "key": "0x013a6e2b",
                            "ty": 9
                          }
                        },
                        "root_key": "0x013a6e2b"
                      }
                    },
                    "name": "balances"
                  }
                ],
                "name": "Mother"
              }
            },
            "root_key": "0x00000000"
          }
        },
        "types": [
          {
            "id": 0,
            "type": {
              "def": {
                "primitive": "str"
              }
            }
          },
          {
            "id": 1,
            "type": {
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              },
              "path": [
                "ink_primitives",
                "types",
                "Hash"
              ]
            }
          },
          {
            "id": 2,
            "type": {
              "def": {
                "array": {
                  "len": 32,
                  "type": 3
                }
              }
            }
          },
          {
            "id": 3,
            "type": {
              "def": {
                "primitive": "u8"
              }
            }
          },
          {
            "id": 4,
            "type": {
              "def": {
                "sequence": {
                  "type": 5
                }
              }
            }
          },
          {
            "id": 5,
            "type": {
              "def": {
                "sequence": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 6,
            "type": {
              "def": {
                "variant": {
                  "variants": [
                    {
                      "index": 0,
                      "name": "None"
                    },
                    {
                      "fields": [
                        {
                          "type": 7
                        }
                      ],
                      "index": 1,
                      "name": "Some"
                    }
                  ]
                }
              },
              "params": [
                {
                  "name": "T",
                  "type": 7
                }
              ],
              "path": [
                "Option"
              ]
            }
          },
          {
            "id": 7,
            "type": {
              "def": {
                "tuple": [
                  8,
                  9
                ]
              }
            }
          },
          {
            "id": 8,
            "type": {
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              },
              "path": [
                "ink_primitives",
                "types",
                "AccountId"
              ]
            }
          },
          {
            "id": 9,
            "type": {
              "def": {
                "primitive": "u128"
              }
            }
          },
          {
            "id": 10,
            "type": {
              "def": {
                "primitive": "u32"
              }
            }
          },
          {
            "id": 11,
            "type": {
              "def": {
                "primitive": "bool"
              }
            }
          },
          {
            "id": 12,
            "type": {
              "def": {
                "sequence": {
                  "type": 3
                }
              }
            }
          },
          {
            "id": 13,
            "type": {
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 0,
                      "typeName": "String"
                    },
                    {
                      "name": "subject",
                      "type": 1,
                      "typeName": "Hash"
                    },
                    {
                      "name": "bids",
                      "type": 14,
                      "typeName": "Bids"
                    },
                    {
                      "name": "terms",
                      "type": 15,
                      "typeName": "[BlockNumber; 3]"
                    },
                    {
                      "name": "status",
                      "type": 16,
                      "typeName": "Status"
                    },
                    {
                      "name": "finalized",
                      "type": 11,
                      "typeName": "bool"
                    },
                    {
                      "name": "vector",
                      "type": 12,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              },
              "path": [
                "mother",
                "mother",
                "Auction"
              ]
            }
          },
          {
            "id": 14,
            "type": {
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "Vec<Vec<Option<(AccountId, Balance)>>>"
                    }
                  ]
                }
              },
              "path": [
                "mother",
                "mother",
                "Bids"
              ]
            }
          },
          {
            "id": 15,
            "type": {
              "def": {
                "array": {
                  "len": 3,
                  "type": 10
                }
              }
            }
          },
          {
            "id": 16,
            "type": {
              "def": {
                "variant": {
                  "variants": [
                    {
                      "index": 0,
                      "name": "NotStarted"
                    },
                    {
                      "index": 1,
                      "name": "OpeningPeriod"
                    },
                    {
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 2,
                      "name": "EndingPeriod"
                    },
                    {
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "Outline"
                        }
                      ],
                      "index": 3,
                      "name": "Ended"
                    },
                    {
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 4,
                      "name": "RfDelay"
                    }
                  ]
                }
              },
              "path": [
                "mother",
                "mother",
                "Status"
              ]
            }
          },
          {
            "id": 17,
            "type": {
              "def": {
                "variant": {
                  "variants": [
                    {
                      "index": 0,
                      "name": "NoWinner"
                    },
                    {
                      "index": 1,
                      "name": "WinnerDetected"
                    },
                    {
                      "index": 2,
                      "name": "PayoutCompleted"
                    }
                  ]
                }
              },
              "path": [
                "mother",
                "mother",
                "Outline"
              ]
            }
          },
          {
            "id": 18,
            "type": {
              "def": {
                "variant": {
                  "variants": [
                    {
                      "index": 0,
                      "name": "None"
                    },
                    {
                      "fields": [
                        {
                          "type": 19
                        }
                      ],
                      "index": 1,
                      "name": "Some"
                    }
                  ]
                }
              },
              "params": [
                {
                  "name": "T",
                  "type": 19
                }
              ],
              "path": [
                "Option"
              ]
            }
          },
          {
            "id": 19,
            "type": {
              "def": {
                "variant": {
                  "variants": [
                    {
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "String"
                        }
                      ],
                      "index": 0,
                      "name": "Revert"
                    },
                    {
                      "index": 1,
                      "name": "Panic"
                    }
                  ]
                }
              },
              "path": [
                "mother",
                "mother",
                "Failure"
              ]
            }
          },
          {
            "id": 20,
            "type": {
              "def": {
                "variant": {
                  "variants": [
                    {
                      "fields": [
                        {
                          "type": 21
                        }
                      ],
                      "index": 0,
                      "name": "Ok"
                    },
                    {
                      "fields": [
                        {
                          "type": 19
                        }
                      ],
                      "index": 1,
                      "name": "Err"
                    }
                  ]
                }
              },
              "params": [
                {
                  "name": "T",
                  "type": 21
                },
                {
                  "name": "E",
                  "type": 19
                }
              ],
              "path": [
                "Result"
              ]
            }
          },
          {
            "id": 21,
            "type": {
              "def": {
                "tuple": []
              }
            }
          }
        ],
        "version": "4"
      }"##,
    );
    Mutex::new(contract)
});

#[test]
fn types() {
    let _mother = MOTHER.lock().unwrap();
    let _expected = EXPECTED.lock().unwrap();

    // TODO
}

#[test]
fn layout() {
    let _mother = MOTHER.lock().unwrap();
    let _expected = EXPECTED.lock().unwrap();

    // TODO
}
